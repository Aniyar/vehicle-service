plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'nu.swe'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    //spring-core
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.4'

    //db
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    //utils
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.auth0:java-jwt:3.4.1'



    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //logs
    implementation "ch.qos.logback:logback-core:1.4.8"
    implementation "ch.qos.logback:logback-classic:1.4.8"
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0"

    //mapper
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    //minio
    implementation group: 'io.minio', name: 'minio', version: '8.5.5'

    //google
    implementation 'com.google.api-client:google-api-client:2.2.0'
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    //config
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('test') {
    useJUnitPlatform()
}

def static isFilePrefixed(file) {
    return (file.name ==~ '^V\\d+__.*\\.sql\$') \
                 || (file.name ==~ '^V\\d{1,3}[.]\\d{1,3}[.]\\d{1,3}__.*\\.sql\$') \
                 || (file.name ==~ '^V\\d{1,3}[.]\\d{1,3}[.]\\d{1,3}_\\d{1,3}__.*\\.sql\$') \
                 || (file.name ==~ '^V\\d{1,3}[.]\\d{1,3}[.]\\d{1,3}[.]\\d{1,3}__.*\\.sql\$')
}

task prefixNewMigrations(group: 'flyway') {
    fileTree(dir: "src/main/resources/db/migration").exclude({ isFilePrefixed(it.file) })
            .each {
                file ->
                    doLast {
                        def timestamp = new Date().format("yyMMddHHmmss", TimeZone.getTimeZone("GMT"))
                        println "Renaming $file.name to V${timestamp}__$file.name"
                        file.renameTo("$file.parentFile.absolutePath$file.separator" + "V" + "${timestamp}__$file.name")
                        // Sleep for a moment to avoid prefix conflicts when renaming multiple files
                        sleep(1 * 1000)
                    }
            }
}
